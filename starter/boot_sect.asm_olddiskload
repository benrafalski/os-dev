;
; A boot sector that prints a string using our function.
;
[org 0x7c00] ; Tell the assembler where this code will be loaded
[bits 16]
; mov bx, HELLO_MSG ; Use BX as a parameter to our function , so
; call print_string ; we can specify the address of a string.
; mov bx, GOODBYE_MSG
; call print_string
; mov bx, [HEX_WORD]
; call print_hex

; BIOS stores boot drive in dl
mov [BOOT_DRIVE], dl 
; set up stack
mov bp, 0x8000
mov sp, bp
; load the sectors to 0x9000 in RAM
mov bx, 0x9000
; load 3 sectors
mov dh, 3
; load from disk
mov dl, [BOOT_DRIVE]
call disk_load

; prints 0xDEAD
mov bx, [0x9000]
call print_hex
; prints 0XBABE
mov bx, [0x9000 + 512]
call print_hex
; prints 0xCAFE
mov bx, [0x9000 + 1028]
call print_hex

jmp $ ; Hang

%include "print_string.asm"
%include "print_hex.asm"
%include "disk_load.asm"

BOOT_DRIVE: db 0
; Data
; HELLO_MSG: db 'Hello, World!', 0
; GOODBYE_MSG: db 'Goodbye!', 0
; HEX_WORD: dw 0xdead
; Padding and magic number.
times 510-($-$$) db 0
dw 0xaa55


times 256 dw 0xdead
times 256 dw 0xbabe
times 256 dw 0xcafe
